name: Phase-1 – ECR repo & image push

on:
  workflow_dispatch:       # run it manually (Actions ➞ Phase-1 ➞ Run)

permissions:
  id-token: write
  contents: read

env:                        # comes from your secrets screen-shot
  AWS_REGION:   ${{ secrets.AWS_REGION }}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  REPO_NAME:    ${{ secrets.ECR_REPO }}       # e.g. my-html-site
  STACK_NAME:   phase1-ecr-stack

jobs:
  build-push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region:     ${{ env.AWS_REGION }}

      # ── deploy Phase-1 stack ─────────────────────────────────
      - name: Deploy Phase-1 ECR stack
        run: |
          aws cloudformation deploy \
            --stack-name ${STACK_NAME} \
            --template-file infra/phase1-ecr.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides RepoName=${REPO_NAME}

      # ── pull repo URI from stack output ─────────────────────
      - name: Get repository URI
        id: repo
        run: |
          URI=$(aws cloudformation describe-stacks \
                  --stack-name ${STACK_NAME} \
                  --query "Stacks[0].Outputs[?OutputKey=='RepositoryUri'].OutputValue" \
                  --output text)
          echo "REPO_URI=$URI" >> "$GITHUB_ENV"
          echo "Repository URI: $URI"

      # ── login, build, push ──────────────────────────────────
      - name: Build & push Docker image
        run: |
          aws ecr get-login-password | \
            docker login --username AWS --password-stdin "$REPO_URI"
          docker build -t ${REPO_NAME}:latest .
          docker tag  ${REPO_NAME}:latest "${REPO_URI}:latest"
          docker push "${REPO_URI}:latest"
