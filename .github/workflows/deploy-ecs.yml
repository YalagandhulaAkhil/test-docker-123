name: Deploy ECS Cluster

on:
  push:
    paths:
      - "infra/ecs.yml"
      - ".github/workflows/deploy-ecs.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  STACK_NAME: ecs-cluster-stack
  VPC_STACK: my-vpc-stack
  IAM_STACK: my-iam-stack
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

jobs:
  deploy-ecs:
    runs-on: ubuntu-latest

    steps:
    # 1. Checkout Code
    - uses: actions/checkout@v4

    # 2. Configure AWS OIDC Credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    # 3. Read Outputs from S3
    - name: Read outputs from previous stacks
      run: |
        set -euo pipefail
        aws s3 cp s3://${S3_BUCKET_NAME}/${VPC_STACK}/outputs.txt vpc_outputs.txt
        aws s3 cp s3://${S3_BUCKET_NAME}/${IAM_STACK}/outputs.txt iam_outputs.txt

        VPC_ID=$(grep 'VpcId=' vpc_outputs.txt | cut -d '=' -f2)
        SUBNET1=$(grep 'PublicSubnet1Id=' vpc_outputs.txt | cut -d '=' -f2)
        SUBNET2=$(grep 'PublicSubnet2Id=' vpc_outputs.txt | cut -d '=' -f2)
        PROFILE_ARN=$(grep 'ECSInstanceProfileArn=' iam_outputs.txt | cut -d '=' -f2)

        echo "VPC_ID=$VPC_ID"           >> $GITHUB_ENV
        echo "SUBNET1=$SUBNET1"         >> $GITHUB_ENV
        echo "SUBNET2=$SUBNET2"         >> $GITHUB_ENV
        echo "PROFILE_ARN=$PROFILE_ARN" >> $GITHUB_ENV

    # 4. Deploy ECS Cluster
    - name: Deploy ECS CloudFormation stack
      id: deploy
      run: |
        set -e
        SubnetCSV="${SUBNET1},${SUBNET2}"
        aws cloudformation deploy \
          --stack-name ${STACK_NAME} \
          --template-file infra/ecs.yml \
          --parameter-overrides \
              ECSClusterName=html-ecs \
              VpcId=${VPC_ID} \
              SubnetIds="${SubnetCSV}" \
              Ec2InstanceProfileArn=${PROFILE_ARN} \
              KeyName=${{ secrets.AAA }} \
          --capabilities CAPABILITY_NAMED_IAM \
          --no-fail-on-empty-changeset

    # 5. Debug failure
    - name: Dump stack events on failure
      if: failure() && steps.deploy.outcome == 'failure'
      run: |
        echo "⚠️ Deployment failed. Dumping stack events..."
        aws cloudformation describe-stack-events \
          --stack-name ${STACK_NAME} \
          --max-items 30 --output table

    # 6. Save ECS Outputs to S3
    - name: Save ECS outputs to S3
      if: success()
      run: |
        set -e
        echo "ClusterName=html-ecs" > infra/outputs.txt
        echo "ClusterArn=$(aws ecs describe-clusters --clusters html-ecs --query 'clusters[0].clusterArn' --output text)" >> infra/outputs.txt
        aws s3 cp infra/outputs.txt s3://${S3_BUCKET_NAME}/${STACK_NAME}/outputs.txt
