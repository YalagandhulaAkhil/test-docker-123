name: Deploy AWS Infrastructure (IAM + VPC)

on:
  push:
    branches: [ main ]
    paths:
      - 'infra/**.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy IAM-roles and VPC/Subnets stacks
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4

    - name: 🔑 Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume:  ${{ secrets.AWS_ROLE_ARN }}
        aws-region:      ${{ secrets.AWS_REGION }}

    # ─────────────────────────────────────────────
    # 🧹 Pre-step: delete iam-roles stack if stuck in ROLLBACK_COMPLETE
    # ─────────────────────────────────────────────
    - name: 🧹 Delete iam-roles if in ROLLBACK_COMPLETE
      run: |
        STACK_STATUS=$(aws cloudformation describe-stacks \
          --stack-name iam-roles \
          --query 'Stacks[0].StackStatus' \
          --output text 2>/dev/null || echo "NOT_FOUND")

        if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
          echo "🧨 Deleting stuck stack iam-roles..."
          aws cloudformation delete-stack --stack-name iam-roles
          aws cloudformation wait stack-delete-complete --stack-name iam-roles
          echo "✅ Deleted iam-roles stack in ROLLBACK_COMPLETE state."
        else
          echo "ℹ️ Stack status is $STACK_STATUS — continuing."
        fi

    # ─────────────────────────────────────────────
    # 🧪 Validate iam-roles template
    # ─────────────────────────────────────────────
    - name: 🧪 Validate iam-roles.yml
      run: aws cloudformation validate-template --template-body file://infra/iam-roles.yml

    # ─────────────────────────────────────────────
    # 🚀 Deploy IAM Roles stack (with capability flag)
    # ─────────────────────────────────────────────
    - name: 🚀 Deploy iam-roles stack
      id: deploy_iam
      continue-on-error: true
      run: |
        aws cloudformation deploy \
          --stack-name iam-roles \
          --template-file infra/iam-roles.yml \
          --capabilities CAPABILITY_NAMED_IAM

    - name: 🩺 Diagnose iam-roles failure
      if: steps.deploy_iam.outcome == 'failure'
      run: |
        echo "⚠️ iam-roles stack failed — printing CREATE_FAILED events"
        aws cloudformation describe-stack-events \
          --stack-name iam-roles \
          --query "StackEvents[?ResourceStatus=='CREATE_FAILED'].[LogicalResourceId,ResourceType,ResourceStatusReason]" \
          --output table
        exit 1

    # ─────────────────────────────────────────────
    # 🧪 Validate VPC template
    # ─────────────────────────────────────────────
    - name: 🧪 Validate vpc-subnets-securitygroup.yml
      run: aws cloudformation validate-template --template-body file://infra/vpc-subnets-securitygroup.yml

    # ─────────────────────────────────────────────
    # 🚀 Deploy VPC/Subnet/SecurityGroup stack
    # ─────────────────────────────────────────────
    - name: 🚀 Deploy vpc-subnet-sg stack
      run: |
        aws cloudformation deploy \
          --stack-name vpc-subnet-sg \
          --template-file infra/vpc-subnets-securitygroup.yml

    # ─────────────────────────────────────────────
    # 📊 Output the exported values from both stacks
    # ─────────────────────────────────────────────
    - name: 📊 Show CloudFormation Outputs
      run: |
        for stack in iam-roles vpc-subnet-sg; do
          echo "🔸 Outputs for $stack:"
          aws cloudformation describe-stacks \
            --stack-name $stack \
            --query "Stacks[0].Outputs[*].[OutputKey,OutputValue]" \
            --output table || true
        done
