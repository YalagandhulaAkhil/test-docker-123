name: Build → Push → Deploy (ECR + ECS Cluster)

on:
  push:
    branches: [main]             # run on every commit to main
  workflow_dispatch:             # or run manually

permissions:
  id-token: write
  contents:  read

env:                              # set once for convenience
  AWS_REGION:   ${{ secrets.AWS_REGION }}
  AWS_ROLE_ARN: ${{ secrets.AWS_ROLE_ARN }}
  REPO_NAME:    ${{ secrets.ECR_REPO }}     # e.g. my-html-site
  ECR_STACK:    phase1-ecr-stack
  ECS_STACK:    phase2-ecs-cluster
  CLUSTER_NAME: my-ecs-cluster

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # ── assume AWS role via OIDC ────────────────────────────────
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_ARN }}
        aws-region:     ${{ env.AWS_REGION }}

    # ── Phase 1: create / ensure ECR repo ──────────────────────
    - name: Deploy Phase-1 ECR stack
      run: |
        aws cloudformation deploy \
          --stack-name  "$ECR_STACK" \
          --template-file infra/phase1-ecr.yml \
          --parameter-overrides RepoName=$REPO_NAME

    - name: Get ECR repository URI
      id: repo_uri
      run: |
        URI=$(aws cloudformation describe-stacks \
                --stack-name "$ECR_STACK" \
                --query "Stacks[0].Outputs[?OutputKey=='RepositoryUri'].OutputValue" \
                --output text)
        echo "REPO_URI=$URI" >> "$GITHUB_ENV"

    - name: Login, build, push Docker image
      run: |
        aws ecr get-login-password | docker login --username AWS --password-stdin "$REPO_URI"
        docker build -t "$REPO_NAME:latest" .
        docker tag   "$REPO_NAME:latest" "$REPO_URI:latest"
        docker push  "$REPO_URI:latest"
        echo "IMAGE_URI=$REPO_URI:latest" >> "$GITHUB_ENV"

    # ── Phase 2: deploy ECS cluster w/ EC2 capacity ────────────
    - name: Deploy Phase-2 ECS cluster stack
      run: |
        aws cloudformation deploy \
          --stack-name "$ECS_STACK" \
          --template-file infra/ecs-cluster.yml \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides \
              ClusterName=$CLUSTER_NAME \
              KeyName=${{ secrets.EC2_KEYPAIR }}

    - name: Show cluster ARN
      run: |
        ARN=$(aws ecs describe-clusters --clusters $CLUSTER_NAME --query 'clusters[0].clusterArn' --output text)
        echo "✅ ECS cluster ready → $ARN"
