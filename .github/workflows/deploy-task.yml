# .github/workflows/deploy-task.yml
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Registers (or updates) the Fargate Task Definition stack
# ------------------------------------------------------------------
# Prerequisites
#   ‚Ä¢ IAM stack exports  : ECSTaskRoleArn, ECSExecutionRoleArn
#   ‚Ä¢ ECR stack exports  : RepoUri
#   ‚Ä¢ scripts/           : read-s3-outputs.sh, save-outputs.sh
# ------------------------------------------------------------------
name: Deploy ECS Task Definition

on:
  push:
    paths:
      - "infra/task.yml"
      - ".github/workflows/deploy-task.yml"
      - "scripts/read-s3-outputs.sh"
      - "scripts/save-outputs.sh"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION:           ${{ secrets.AWS_REGION }}
  TASK_STACK:           ecs-task-stack
  IAM_STACK:            my-iam-stack          #¬†‚Üê¬†update if different
  ECR_STACK:            ecr-stack             #¬†‚Üê¬†update if different
  S3_BUCKET_NAME:       ${{ secrets.S3_BUCKET_NAME }}

jobs:
  deploy-task-def:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£¬†Checkout repo
      - uses: actions/checkout@v4

      # 2Ô∏è‚É£¬†Configure AWS credentials via OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region:     ${{ env.AWS_REGION }}

      # 3Ô∏è‚É£¬†Gather required outputs (RepoUri, task/exec roles)
      - name: Read stack outputs from S3
        run: |
          set -euo pipefail
          chmod +x scripts/read-s3-outputs.sh

          echo "üîπ  Fetching outputs ‚Ä¶"
          REPO_URI=$(scripts/read-s3-outputs.sh "${ECR_STACK}" RepoUri)
          EXEC_ROLE=$(scripts/read-s3-outputs.sh "${IAM_STACK}" ECSExecutionRoleArn)
          TASK_ROLE=$(scripts/read-s3-outputs.sh "${IAM_STACK}" ECSTaskRoleArn)

          if [[ -z "$REPO_URI" || -z "$EXEC_ROLE" || -z "$TASK_ROLE" ]]; then
            echo "‚ùå  Missing one or more required outputs."
            echo "    REPO_URI=$REPO_URI"
            echo "    EXEC_ROLE=$EXEC_ROLE"
            echo "    TASK_ROLE=$TASK_ROLE"
            exit 1
          fi

          echo "‚úÖ  Outputs resolved:"
          echo "    REPO_URI=$REPO_URI"
          echo "    EXEC_ROLE=$EXEC_ROLE"
          echo "    TASK_ROLE=$TASK_ROLE"

          # Export for later steps
          echo "REPO_URI=$REPO_URI"   >> $GITHUB_ENV
          echo "EXEC_ROLE=$EXEC_ROLE" >> $GITHUB_ENV
          echo "TASK_ROLE=$TASK_ROLE" >> $GITHUB_ENV

      # 4Ô∏è‚É£¬†Deploy / update the task‚Äëdefinition stack
      - name: Deploy Fargate Task Definition
        run: |
          aws cloudformation deploy \
            --stack-name ${TASK_STACK} \
            --template-file infra/task.yml \
            --parameter-overrides \
                ContainerImage=${REPO_URI}:latest \
                ExecutionRoleArn=${EXEC_ROLE} \
                TaskRoleArn=${TASK_ROLE} \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      # 5Ô∏è‚É£¬†Save outputs to S3 (for service deploy and others)
      - name: Save task‚Äëstack outputs to S3
        run: |
          chmod +x scripts/save-outputs.sh
          S3_BUCKET_NAME=${{ env.S3_BUCKET_NAME }} \
          ./scripts/save-outputs.sh ${TASK_STACK}

      # 6Ô∏è‚É£¬†Attach outputs.txt as artifact (optional)
      - name: Upload task outputs artifact
        uses: actions/upload-artifact@v4
        with:
          name: ecs-t
