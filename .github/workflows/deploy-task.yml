name: Register ECS Task Definition

on:
  push:
    paths:
      - "infra/task.yml"
      - ".github/workflows/deploy-task.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION:           ${{ secrets.AWS_REGION }}
  STACK_NAME:           ecs-task-stack
  IAM_STACK:            my-iam-stack
  ECR_STACK:            ecr-stack
  ECS_CLUSTER_STACK:    ecs-cluster-stack
  S3_BUCKET_NAME:       ${{ secrets.S3_BUCKET_NAME }}

jobs:
  register-task-def:
    runs-on: ubuntu-latest

    steps:
    # ─────────────────────────────────────────
    # 1. Checkout code
    # ─────────────────────────────────────────
    - uses: actions/checkout@v4

    # ─────────────────────────────────────────
    # 2. AWS credentials via OIDC
    # ─────────────────────────────────────────
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region:     ${{ env.AWS_REGION }}

    # ─────────────────────────────────────────
    # 3. Pull required outputs from S3
    # ─────────────────────────────────────────
    - name: Fetch outputs
      id: outputs
      run: |
        set -euo pipefail

        for s in ${IAM_STACK} ${ECR_STACK} ${ECS_CLUSTER_STACK}; do
          aws s3 cp s3://${S3_BUCKET_NAME}/${s}/outputs.txt ${s}.txt
          cat ${s}.txt
        done

        kv () { grep -E "^ *$1 *=" "$2" | cut -d '=' -f2 | xargs; }

        EXEC_ROLE=$(kv ECSExecutionRoleArn ${IAM_STACK}.txt)
        TASK_ROLE=$(kv ECSTaskRoleArn     ${IAM_STACK}.txt)
        IMAGE_URI=$(kv RepoUri            ${ECR_STACK}.txt):latest
        CLUSTER_NAME=$(kv ClusterName     ${ECS_CLUSTER_STACK}.txt)

        for v in EXEC_ROLE TASK_ROLE IMAGE_URI CLUSTER_NAME; do
          [[ -z "${!v}" ]] && { echo "❌ $v missing"; exit 1; }
        done

        echo "EXEC_ROLE=$EXEC_ROLE"           >> $GITHUB_ENV
        echo "TASK_ROLE=$TASK_ROLE"           >> $GITHUB_ENV
        echo "IMAGE_URI=$IMAGE_URI"           >> $GITHUB_ENV
        echo "CLUSTER_NAME=$CLUSTER_NAME"     >> $GITHUB_ENV

    # ─────────────────────────────────────────
    # 4. Register task definition (CFN stack)
    # ─────────────────────────────────────────
    - name: Deploy CloudFormation stack
      id: deploy
      run: |
        set -e
        aws cloudformation deploy \
          --stack-name ${STACK_NAME} \
          --template-file infra/task.yml \
          --parameter-overrides \
              ClusterName=${CLUSTER_NAME} \
              ImageUri=${IMAGE_URI} \
              ECSExecutionRoleArn=${EXEC_ROLE} \
              ECSTaskRoleArn=${TASK_ROLE} \
          --capabilities CAPABILITY_NAMED_IAM \
          --no-fail-on-empty-changeset

    # ─────────────────────────────────────────
    # 5. Dump events on failure
    # ─────────────────────────────────────────
    - name: Dump CFN events (on failure)
      if: failure() && steps.deploy.outcome == 'failure'
      run: |
        aws cloudformation describe-stack-events \
          --stack-name ${STACK_NAME} --max-items 40 --output table

    # ─────────────────────────────────────────
    # 6. Save outputs.txt to S3
    # ─────────────────────────────────────────
    - name: Save task-def outputs
      if: success()
      run: |
        chmod +x scripts/save-outputs.sh
        S3_BUCKET_NAME=${{ env.S3_BUCKET_NAME }} ./scripts/save-outputs.sh ${STACK_NAME}

    # ─────────────────────────────────────────
    # 7. Upload outputs as artifact
    # ─────────────────────────────────────────
    - name: Upload outputs artifact
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: task-def-outputs
        path: infra/outputs.txt
