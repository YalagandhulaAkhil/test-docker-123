AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS cluster (EC2 launch type) with ASG capacity provider – no Service"

# ─────────────────────────────────────────────
# Parameters
# ─────────────────────────────────────────────
Parameters:
  ECSClusterName:
    Type: String
    Default: myhtml-site
    Description: Name of the ECS cluster

  PVpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID

  PSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnet 1

  PSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Public subnet 2

  PInstanceProfileArn:
    Type: String
    Description: Instance-profile ARN for the EC2 hosts

# Latest AL2023 ECS-optimised AMI (SSM parameter)
  LatestECSAMI:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id"

# ─────────────────────────────────────────────
# Security-group for EC2 hosts
# ─────────────────────────────────────────────
Resources:

  HostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow inbound HTTP on port 8080"
      VpcId: !Ref PVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

# ─────────────────────────────────────────────
# ECS Cluster
# ─────────────────────────────────────────────
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName
      ClusterSettings:
        - Name: containerInsights
          Value: disabled

# ─────────────────────────────────────────────
# Launch Template
# ─────────────────────────────────────────────
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t3.micro
        ImageId: !Ref LatestECSAMI
        IamInstanceProfile:
          Arn: !Ref PInstanceProfileArn
        SecurityGroupIds:
          - !Ref HostSecurityGroup
        UserData:
          Fn::Base64:
            Fn::Sub:
              - |
                #!/bin/bash
                echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
              - { Cluster: !Ref ECSClusterName }

# ─────────────────────────────────────────────
# Auto Scaling Group backing the cluster
# ─────────────────────────────────────────────
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [ !Ref PSubnet1, !Ref PSubnet2 ]
      MinSize: 0
      MaxSize: 2
      DesiredCapacity: 1
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides: [ { InstanceType: t3.micro } ]
        InstancesDistribution:
          OnDemandBaseCapacity: 0
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: lowest-price
      Tags:
        - Key: Name
          Value: !Sub "ECS Host – ${ECSClusterName}"
          PropagateAtLaunch: true

# ─────────────────────────────────────────────
# Capacity Provider + association
# ─────────────────────────────────────────────
  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref AutoScalingGroup
        ManagedScaling: { Status: ENABLED, TargetCapacity: 100 }
        ManagedTerminationProtection: DISABLED

  CPAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviders: [ !Ref CapacityProvider, FARGATE, FARGATE_SPOT ]
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref CapacityProvider
          Base: 0
          Weight: 1

# ─────────────────────────────────────────────
# Outputs
# ─────────────────────────────────────────────
Outputs:
  ClusterName:
    Description: Name of the ECS cluster
    Value: !Ref ECSClusterName
    Export:
      Name: !Sub "${AWS::StackName}-ClusterName"

  CapacityProviderName:
    Description: Name of the ASG-backed capacity provider
    Value: !Ref CapacityProvider
    Export:
      Name: !Sub "${AWS::StackName}-CapacityProviderName"
