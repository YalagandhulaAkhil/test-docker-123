AWSTemplateFormatVersion: "2010-09-09"
Description: ECS cluster (EC2 launch type) with ASG capacity provider – no service

# ─────────────────────────────────────────────
# PARAMETERS (all overridable from workflow)
# ─────────────────────────────────────────────
Parameters:
  ECSClusterName:
    Type: String
    Default: html-cluster
    Description: Name of the ECS cluster

  VpcId:
    Type: String
    Default: ""
    AllowedPattern: "^(?:vpc-[0-9a-f]{8,17}|)$"
    Description: Existing VPC ID (leave blank to fail fast if not provided)

  SubnetIds:
    Type: CommaDelimitedList
    Default: ""
    Description: Comma-separated list of two public subnets

  Ec2InstanceProfileArn:
    Type: String
    Description: ARN of the instance-profile for EC2 hosts

  KeyName:                      # ← optional SSH key pair for debug
    Type: String
    Default: ""
    Description: (Optional) EC2 key pair for SSH access

  LatestECSAMI:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id"
    Description: AL2023 ECS-optimised AMI

# ─────────────────────────────────────────────
# SECURITY GROUP (port 8080 open)
# ─────────────────────────────────────────────
Resources:
  Ec2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS EC2 host SG (port 8080)
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIpv6: "::/0"

# ─────────────────────────────────────────────
# ECS CLUSTER
# ─────────────────────────────────────────────
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName
      ClusterSettings:
        - Name: containerInsights
          Value: disabled

# ─────────────────────────────────────────────
# LAUNCH TEMPLATE
# ─────────────────────────────────────────────
  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: ECSCluster
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestECSAMI
        InstanceType: t3.micro
        KeyName: !If [HasKey, !Ref KeyName, !Ref "AWS::NoValue"]
        IamInstanceProfile:
          Arn: !Ref Ec2InstanceProfileArn
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
            Groups: [ !Ref Ec2SecurityGroup ]
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 30
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ECSClusterName} >> /etc/ecs/ecs.config
      LaunchTemplateName: !Sub "${ECSClusterName}-lt"

Conditions:
  HasKey: !Not [ !Equals [ !Ref KeyName, "" ] ]

# ─────────────────────────────────────────────
# AUTO SCALING GROUP
# ─────────────────────────────────────────────
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: ECSCluster
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      MinSize: 0
      MaxSize: 2
      DesiredCapacity: 0
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub "ECS Instance - ${ECSClusterName}"
          PropagateAtLaunch: true

# ─────────────────────────────────────────────
# CAPACITY PROVIDER + ASSOCIATION
# ─────────────────────────────────────────────
  AsgCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ECSAutoScalingGroup
        ManagedScaling:
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: DISABLED

  ClusterCPAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    DependsOn: ECSCluster
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
        - !Ref AsgCapacityProvider
      DefaultCapacityProviderStrategy:
        - Base: 0
          Weight: 1
          CapacityProvider: !Ref AsgCapacityProvider

# ─────────────────────────────────────────────
# OUTPUTS
# ─────────────────────────────────────────────
Outputs:
  ClusterArn:
    Description: ARN of the ECS cluster
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${AWS::StackName}-ClusterArn"

  ClusterName:
    Description: Name of the ECS cluster
    Value: !Ref ECSClusterName
    Export:
      Name: !Sub "${AWS::StackName}-ClusterName"

  CapacityProviderName:
    Description: Name of the ASG capacity provider
    Value: !Ref AsgCapacityProvider
    Export:
      Name: !Sub "${AWS::StackName}-CapacityProvider"
