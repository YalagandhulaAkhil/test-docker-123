AWSTemplateFormatVersion: "2010-09-09"
Description: ECS cluster (EC2 launch type) with ALB, Task Definition, and Service.

# ──────────────────────────
# Parameters injected by CI
# ──────────────────────────
Parameters:
  PImageUrl:
    Type: String
    Description: "Full ECR image URI with tag (e.g. 5901xxxxx.dkr.ecr.us-east-1.amazonaws.com/repo:sha)"

  PVpcId:
    Type: AWS::EC2::VPC::Id
  PSubnet1:
    Type: AWS::EC2::Subnet::Id
  PSubnet2:
    Type: AWS::EC2::Subnet::Id
  PExecutionRoleArn:
    Type: String

# ──────────────────────────
# Security Groups
# ──────────────────────────
Resources:
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref PVpcId
      GroupDescription: Inbound 80 from Internet
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EcsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref PVpcId
      GroupDescription: Inbound 8080 from ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref AlbSecurityGroup

# ──────────────────────────
# ECS Cluster & Capacity
# ──────────────────────────
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: test-docker-cluster

  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: {Service: ec2.amazonaws.com}
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref ECSInstanceRole]

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t3.micro
        ImageId: !Sub "${AWS::SSM::Parameter:/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id}"
        IamInstanceProfile: {Name: !Ref ECSInstanceProfile}
        SecurityGroupIds: [!Ref EcsSecurityGroup]
        UserData:
          Fn::Base64:
            Fn::Sub:
              - |
                #!/bin/bash
                echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config
              - {ClusterName: !Ref ECSCluster}

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PSubnet1, !Ref PSubnet2]
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 1

# ──────────────────────────
# Application Load Balancer
# ──────────────────────────
  ApplicationLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: test-docker-alb
      Scheme: internet-facing
      Subnets: [!Ref PSubnet1, !Ref PSubnet2]
      SecurityGroups: [!Ref AlbSecurityGroup]
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref PVpcId
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /
      Matcher: {HttpCode: 200-399}

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

# ──────────────────────────
# Task Definition & Service
# ──────────────────────────
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities: [EC2]
      ExecutionRoleArn: !Ref PExecutionRoleArn
      ContainerDefinitions:
        - Name: web
          Image: !Ref PImageUrl
          Essential: true
          PortMappings:
            - ContainerPort: 8080

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LaunchType: EC2
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: [!Ref PSubnet1, !Ref PSubnet2]
          SecurityGroups: [!Ref EcsSecurityGroup]
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup

# ──────────────────────────
# Outputs
# ──────────────────────────
Outputs:
  AlbDNS:
    Description: Public URL for the service
    Value: !GetAtt ApplicationLB.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-AlbDNS"

  ClusterName:
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${AWS::StackName}-ClusterName"
