AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS Cluster (EC2 launch type) with ASG capacity provider – no SSH key"

########################################
# PARAMETERS
########################################
Parameters:
  ECSClusterName:
    Type: String
    Default: html-ecs
    Description: Cluster name

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Target VPC

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Two public subnets for the Auto Scaling Group

  Ec2InstanceProfileArn:
    Type: String
    Description: ARN of the instance-profile for ECS EC2 hosts

  LatestECSAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id
    Description: Latest Amazon Linux 2023 ECS-optimised AMI

########################################
# RESOURCES
########################################
Resources:
  ## Security group for EC2 hosts
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound HTTP 8080
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIpv6: "::/0"

  ## ECS cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName
      ClusterSettings:
        - Name: containerInsights
          Value: disabled

  ## Launch template (no KeyName)
  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: ECSCluster
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestECSAMI
        InstanceType: t3.micro
        # ← No KeyName => no SSH key/pem
        IamInstanceProfile: { Arn: !Ref Ec2InstanceProfileArn }
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs: { VolumeSize: 30 }
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
            Groups: [ !GetAtt EC2SecurityGroup.GroupId ]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ECSClusterName} >> /etc/ecs/ecs.config

  ## Auto Scaling group
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: ECSCluster
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      MinSize: 0
      MaxSize: 2
      DesiredCapacity: 0
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          PropagateAtLaunch: true
          Value: !Sub "ECS Instance - ${ECSClusterName}"

  ## Capacity provider
  AsgCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ECSAutoScalingGroup
        ManagedScaling: { Status: ENABLED, TargetCapacity: 100 }
        ManagedTerminationProtection: DISABLED

  ## Associate capacity provider with cluster
  ClusterCPAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    DependsOn: ECSCluster
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviders: [ !Ref AsgCapacityProvider ]
      DefaultCapacityProviderStrategy:
        - Base: 0
          Weight: 1
          CapacityProvider: !Ref AsgCapacityProvider

########################################
# OUTPUTS
########################################
Outputs:
  ClusterArn:
    Description: ARN of ECS cluster
    Value: !Ref ECSCluster
    Export: { Name: !Sub "${AWS::StackName}-ClusterArn" }

  ClusterName:
    Description: Cluster name
    Value: !Ref ECSClusterName
    Export: { Name: !Sub "${AWS::StackName}-ClusterName" }

  CapacityProviderName:
    Description: ASG capacity provider name
    Value: !Ref AsgCapacityProvider
    Export: { Name: !Sub "${AWS::StackName}-CapacityProvider" }
