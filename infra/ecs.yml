AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Free-Tier ECS (EC2 launch type) stack for a static HTML site.
  - 1× t2.micro EC2 container host (Free Tier)
  - ECS cluster + service
  - ALB front-end with HTTP (port 80)
  - ECR image URI passed in from GitHub Actions (ImageUrl parameter)

# ────────────────────────────────────────────────────────────────
Parameters:
  ImageUrl:
    Type: String
    Description: Full ECR image URI to deploy
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Optional – EC2 key pair if you want SSH access
    Default: ""

# ────────────────────────────────────────────────────────────────
Mappings:
  # Choose the smallest burstable instance in each region (t3.micro if available)
  RegionToAMI:
    us-east-1: { AMI: ami-02d55cb47e83a99a4 }   # Amazon Linux 2 x86_64 (update if needed)
    us-west-2: { AMI: ami-08962a4068733a2b6 }

# ────────────────────────────────────────────────────────────────
Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: [{ Key: Name, Value: html-free-vpc }]

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: subnet-a }]

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: subnet-b }]

  IGW:
    Type: AWS::EC2::InternetGateway

  IGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttach
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  SubnetRouteAssocA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnetA

  SubnetRouteAssocB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref PublicSubnetB

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ALB HTTP access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound from ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  # ── ECS Cluster ───────────────────────────────────────────────
  Cluster:
    Type: AWS::ECS::Cluster

  # ── EC2 Container Instance (t2.micro) ─────────────────────────
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref ECSInstanceRole]

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t2.micro          # Free-Tier instance
        ImageId: !FindInMap [RegionToAMI, !Ref "AWS::Region", AMI]
        IamInstanceProfile:
          Arn: !Ref ECSInstanceProfile
        KeyName: !If
          - HasKey
          - !Ref KeyPairName
          - !Ref "AWS::NoValue"
        SecurityGroupIds: [!Ref EC2SecurityGroup]
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
            yum install -y aws-cli

      TagSpecifications:
        - ResourceType: instance
          Tags: [{ Key: Name, Value: ecs-container-host }]

  # Condition to handle optional key pair
  Conditions:
    HasKey: !Not [!Equals [!Ref KeyPairName, ""]]

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PublicSubnetA, !Ref PublicSubnetB]
      MinSize: '1'
      MaxSize: '1'
      DesiredCapacity: '1'
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber

  # ── Task + Service (EC2 launch type) ──────────────────────────
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: html-on-ec2
      NetworkMode: bridge
      RequiresCompatibilities: [EC2]
      ContainerDefinitions:
        - Name: html
          Image: !Ref ImageUrl
          PortMappings: [{ ContainerPort: 80 }]

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets: [!Ref PublicSubnetA, !Ref PublicSubnetB]
      SecurityGroups: [!Ref ALBSecurityGroup]
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  Service:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      Cluster: !Ref Cluster
      LaunchType: EC2
      DesiredCount: 1
      TaskDefinition: !Ref TaskDefinition
      LoadBalancers:
        - ContainerName: html
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

# ────────────────────────────────────────────────────────────────
Outputs:
  SiteURL:
    Description: Public URL of your HTML site
    Value: !Sub 'http://${LoadBalancer.DNSName}'
