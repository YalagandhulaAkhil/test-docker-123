AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS cluster (EC2 launch type) + ASG capacity provider – no Service"

# ──────────────
# Parameters
# ──────────────
Parameters:
  ECSClusterName:
    Type: String
    Default: myhtml-site
    Description: "Name of the ECS cluster"

  PVpcId:
    Type: AWS::EC2::VPC::Id
    Description: "VPC where EC2 instances will run"

  PSubnet1:
    Type: AWS::EC2::Subnet::Id
    Description: "Public subnet 1"

  PSubnet2:
    Type: AWS::EC2::Subnet::Id
    Description: "Public subnet 2"

  PInstanceProfileArn:
    Type: String
    Description: "IAM instance-profile ARN for the EC2 hosts"

# Pull latest Amazon Linux 2023 ECS-optimised AMI
Resources:
  LatestECSAmi:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id

  # ──────────────
  # Security group (8080)
  # ──────────────
  EcsHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow inbound HTTP on port 8080"
      VpcId: !Ref PVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080          # ← updated
          ToPort: 8080            # ← updated
          CidrIp: 0.0.0.0/0

  # ──────────────
  # ECS Cluster
  # ──────────────
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName
      ClusterSettings:
        - Name: containerInsights
          Value: disabled

  # ──────────────
  # Launch Template
  # ──────────────
  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t3.micro
        ImageId: !Ref LatestECSAmi
        IamInstanceProfile:
          Arn: !Ref PInstanceProfileArn
        SecurityGroupIds:
          - !Ref EcsHostSecurityGroup
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #!/bin/bash
              echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config
            # variable map:
              { "ClusterName": !Ref ECSClusterName }

  # ──────────────
  # Auto Scaling Group
  # ──────────────
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PSubnet1
        - !Ref PSubnet2
      MinSize: 0
      MaxSize: 2
      DesiredCapacity: 1
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref ECSLaunchTemplate
            Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: t3.micro
        InstancesDistribution:
          OnDemandBaseCapacity: 0
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: lowest-price
      Tags:
        - Key: Name
          Value: !Sub "ECS Host – ${ECSClusterName}"
          PropagateAtLaunch: true

  # ──────────────
  # Capacity Provider & association
  # ──────────────
  AsgCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ECSAutoScalingGroup
        ManagedScaling:
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: DISABLED

  ClusterCPAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviders:
        - !Ref AsgCapacityProvider
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref AsgCapacityProvider
          Base: 0
          Weight: 1

# ──────────────
# Outputs
# ──────────────
Outputs:
  ClusterArn:
    Description: "ARN of the ECS cluster"
    Value: !Ref ECSCluster
    Export:
      Name: !Sub "${AWS::StackName}-ClusterArn"

  ClusterName:
    Description: "Name of the ECS cluster"
    Value: !Ref ECSClusterName
    Export:
      Name: !Sub "${AWS::StackName}-ClusterName"

  CapacityProviderName:
    Description: "Name of the ASG-backed capacity provider"
    Value: !Ref AsgCapacityProvider
    Export:
      Name: !Sub "${AWS::StackName}-CapacityProvider"