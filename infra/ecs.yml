AWSTemplateFormatVersion: "2010-09-09"
Description: ECS cluster with ASG capacity provider (no service)

Parameters:
  PVpcId:               { Type: AWS::EC2::VPC::Id }
  PSubnet1:             { Type: AWS::EC2::Subnet::Id }
  PSubnet2:             { Type: AWS::EC2::Subnet::Id }
  PInstanceProfileArn:  { Type: String }
  ECSClusterName:       { Type: String, Default: myhtml-site }

Resources:
  HostSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow 8080
      VpcId: !Ref PVpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0

  LatestAMI:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id

  Cluster:
    Type: AWS::ECS::Cluster
    Properties: { ClusterName: !Ref ECSClusterName }

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t3.micro
        ImageId: !Ref LatestAMI
        IamInstanceProfile: { Arn: !Ref PInstanceProfileArn }
        SecurityGroupIds: [ !Ref HostSG ]
        UserData:
          Fn::Base64:
            Fn::Sub:
              - |
                #!/bin/bash
                echo ECS_CLUSTER=${Name} >> /etc/ecs/ecs.config
              - { Name: !Ref ECSClusterName }

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [ !Ref PSubnet1, !Ref PSubnet2 ]
      MinSize: 0
      MaxSize: 2
      DesiredCapacity: 1
      MixedInstancesPolicy:
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref LaunchTemplate
            Version: !GetAtt LaunchTemplate.LatestVersionNumber
          Overrides: [ { InstanceType: t3.micro } ]
        InstancesDistribution:
          OnDemandBaseCapacity: 0
          OnDemandPercentageAboveBaseCapacity: 0
          SpotAllocationStrategy: lowest-price
      Tags:
        - Key: Name
          Value: !Sub "ECS Host â€“ ${ECSClusterName}"
          PropagateAtLaunch: true

  CapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ASG
        ManagedScaling: { Status: ENABLED, TargetCapacity: 100 }
        ManagedTerminationProtection: DISABLED

  Association:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref Cluster
      CapacityProviders: [ !Ref CapacityProvider, FARGATE, FARGATE_SPOT ]
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref CapacityProvider
          Base: 0
          Weight: 1

Outputs:
  ClusterName:
    Value: !Ref ECSClusterName
    Export: { Name: !Sub "${AWS::StackName}-ClusterName" }
