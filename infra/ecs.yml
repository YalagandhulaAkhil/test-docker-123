AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Free‑tier ECS cluster (EC2 launch type) with 1× t2.micro host
  and an Auto Scaling capacity provider – no SSH key.

##############################################################################
# PARAMETERS
##############################################################################
Parameters:
  ECSClusterName:
    Type: String
    Default: html-ecs
    Description: ECS cluster name

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC where the host will run

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id
    Description: **Public** subnets (needs Internet Gateway for ECS agent)

  Ec2InstanceProfileArn:
    Type: String
    Description: ARN of the instance profile for the EC2 host

  LatestECSAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id
    # If that SSM parameter ever disappears in your region, hard‑code a valid AMI ID
    # Example:  ami-0bbbxxx123 (Amazon Linux 2023 ECS Optimised, us‑east‑1)

##############################################################################
# RESOURCES
##############################################################################
Resources:

  # ──────────────────────────────────────────────────────────────
  # Security group – allow inbound HTTP 8080 to containers
  # ──────────────────────────────────────────────────────────────
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound HTTP 8080 for container traffic
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIpv6: "::/0"

  # ──────────────────────────────────────────────────────────────
  # ECS Cluster
  # ──────────────────────────────────────────────────────────────
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ECSClusterName
      ClusterSettings:
        - Name: containerInsights
          Value: disabled

  # ──────────────────────────────────────────────────────────────
  # Launch template (t2.micro + no KeyName)
  # ──────────────────────────────────────────────────────────────
  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DependsOn: ECSCluster
    Properties:
      LaunchTemplateData:
        ImageId:          !Ref LatestECSAMI
        InstanceType:     t2.micro       # ← FREE‑TIER
        IamInstanceProfile:
          Arn: !Ref Ec2InstanceProfileArn
        NetworkInterfaces:
          - DeviceIndex:                0
            AssociatePublicIpAddress:   true
            DeleteOnTermination:        true
            Groups: [ !GetAtt EC2SecurityGroup.GroupId ]
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs: { VolumeSize: 30 }
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            echo "ECS_CLUSTER=${ECSClusterName}" >> /etc/ecs/ecs.config

  # ──────────────────────────────────────────────────────────────
  # Auto Scaling Group (fixed at 1 × t2.micro)
  # ──────────────────────────────────────────────────────────────
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: ECSCluster
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      MinSize:           1   # keep exactly ONE instance
      DesiredCapacity:   1
      MaxSize:           1
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version:          !GetAtt ECSLaunchTemplate.LatestVersionNumber
      Tags:
        - Key:   Name
          Value: !Sub "ECS Host – ${ECSClusterName}"
          PropagateAtLaunch: true

  # ──────────────────────────────────────────────────────────────
  # Capacity provider
  # ──────────────────────────────────────────────────────────────
  AsgCapacityProvider:
    Type: AWS::ECS::CapacityProvider
    Properties:
      Name: !Sub "${ECSClusterName}-cp"
      AutoScalingGroupProvider:
        AutoScalingGroupArn:  !Ref ECSAutoScalingGroup
        ManagedScaling:
          Status:          ENABLED
          TargetCapacity:  100
        ManagedTerminationProtection: DISABLED

  ClusterCPAssociation:
    Type: AWS::ECS::ClusterCapacityProviderAssociations
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviders: [ !Ref AsgCapacityProvider ]
      DefaultCapacityProviderStrategy:
        - Base:   0
          Weight: 1
          CapacityProvider: !Ref AsgCapacityProvider

##############################################################################
# OUTPUTS
##############################################################################
Outputs:
  ClusterArn:
    Description: ECS cluster ARN
    Value: !Ref ECSCluster
    Export: { Name: !Sub "${AWS::StackName}-ClusterArn" }

  ClusterName:
    Description: ECS cluster name
    Value: !Ref ECSClusterName
    Export: { Name: !Sub "${AWS::StackName}-ClusterName" }

  CapacityProviderName:
    Description: ASG capacity provider name
    Value: !Ref AsgCapacityProvider
    Export: { Name: !Sub "${AWS::StackName}-CapacityProvider" }

  EC2SecurityGroupId:
    Description: Security‑group ID of the cluster hosts
    Value: !Ref EC2SecurityGroup
    Export: { Name: !Sub "${AWS::StackName}-EC2SecurityGroupId" }
